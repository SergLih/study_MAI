;  half-interval.ss 2018
(define (half-interval-metod a b)
  (let((a-value (fun a))
       (b-value (fun b))
      )
     (cond((not(not(or(not(or(not(<= a-value 0)) (= a-value 0)))(not(<= b-value 0)))))
                 (try a b))
         ((not(not(or(not(<= a-value 0))(not(or(not(<= b-value 0))(= b-value 0))))))
                 (try b a))
         ((or(not(or(not(<= a-value 0))(not(<= b-value 0))))
             (not(or(not(or(not(<= a-value 0))(= a-value 0)))(not(or(not(<= b-value 0))(= b-value 0))))))
                 (+ b 1))
     )
  )
)
(define(try neg-point pos-point)
 (let( ;
       (midpoint (average neg-point pos-point))
       (test-value 0)
     )
     (display "+")
     (cond((close-enough? neg-point pos-point) midpoint)
        (#t (set! test-value (fun midpoint))
            (cond((not(<= test-value 0))(try neg-point midpoint))
                 (#t (try midpoint pos-point))
                 (#t midpoint))
         )
     )
 )
)
(define (close-enough? x y)
  (not(or(not(<= (abs (- x y)) tolerance))(= (abs (- x y)) tolerance))))
  ;(<=(abs (- x y))tolerance))
(define (average x y)(* (/ 2.0e+0)(+ x y)))
(define (root a b)
 (display"interval=\t[")
 (display a)
 (display" , ")
 (display b)
 (display"]\n")
 (let((temp (half-interval-metod a b)))
      (newline)
      (display"discrepancy=\t")
      (display(fun temp))(newline)
      (display"root=\t\t")
      (display(if(=(-(- temp b) 1)0)"[bad]" "[good]"))
      temp
 )
)
(define tolerance 0.00001)
(define(fun z)
  (set! z (- (- z (* (/ 109) 108)) (/ e)))
  
  (-(-(* z 3) (*(log z) 4)) 5)
)

" SSL variant 8"
(root 4 5)
