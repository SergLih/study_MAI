%Использование сети Хэмминга для распознавания статических образов
%[0,9,2]
p9 =      [-1 -1 -1 -1 +1 +1 +1 +1 +1 +1;
           -1 -1 -1 -1 +1 +1 +1 +1 +1 +1;
           -1 -1 -1 -1 +1 +1 -1 -1 +1 +1;
           -1 -1 -1 -1 +1 +1 -1 -1 +1 +1;
           -1 -1 -1 -1 +1 +1 -1 -1 +1 +1;
           -1 -1 -1 -1 +1 +1 -1 -1 +1 +1;
           -1 -1 -1 -1 +1 +1 +1 +1 +1 +1;
           -1 -1 -1 -1 +1 +1 +1 +1 +1 +1;
           -1 -1 -1 -1 -1 -1 -1 -1 +1 +1;
           -1 -1 -1 -1 -1 -1 -1 -1 +1 +1;
           -1 -1 -1 -1 +1 +1 +1 +1 +1 +1;
           -1 -1 -1 -1 +1 +1 +1 +1 +1 +1];
     
p0 =      [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 +1 +1 +1 +1 +1 +1 -1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 +1 +1 +1 -1 -1 +1 +1 +1 -1;
           -1 -1 +1 +1 +1 +1 +1 +1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 -1 -1 -1 -1 -1 -1 -1];
       
p4 =      [-1 +1 +1 -1 -1 -1 -1 +1 +1 -1;
           -1 +1 +1 -1 -1 -1 -1 +1 +1 -1;
           -1 +1 +1 -1 -1 -1 -1 +1 +1 -1;
           -1 +1 +1 -1 -1 -1 -1 +1 +1 -1;
           -1 +1 +1 -1 -1 -1 -1 +1 +1 -1;
           -1 +1 +1 +1 +1 +1 +1 +1 +1 -1;
           -1 +1 +1 +1 +1 +1 +1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1];

p1 =      [-1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1;
           -1 -1 -1 +1 +1 +1 +1 -1 -1 -1];
       
p2 =      [+1 +1 +1 +1 +1 +1 +1 +1 -1 -1;
           +1 +1 +1 +1 +1 +1 +1 +1 -1 -1;
           -1 -1 -1 -1 -1 -1 +1 +1 -1 -1;
           -1 -1 -1 -1 -1 -1 +1 +1 -1 -1;
           -1 -1 -1 -1 -1 -1 +1 +1 -1 -1;
           +1 +1 +1 +1 +1 +1 +1 +1 -1 -1;
           +1 +1 +1 +1 +1 +1 +1 +1 -1 -1;
           +1 +1 -1 -1 -1 -1 -1 -1 -1 -1;
           +1 +1 -1 -1 -1 -1 -1 -1 -1 -1;
           +1 +1 -1 -1 -1 -1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 +1 +1 -1 -1;
           +1 +1 +1 +1 +1 +1 +1 +1 -1 -1];
       
p3 =      [-1 -1 +1 +1 +1 +1 +1 +1 -1 -1;
           -1 -1 +1 +1 +1 +1 +1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 +1 +1 +1 +1 -1 -1;
           -1 -1 -1 -1 +1 +1 +1 +1 -1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 -1 -1 -1 -1 -1 +1 +1 -1;
           -1 -1 +1 +1 +1 +1 +1 +1 +1 -1;
           -1 -1 +1 +1 +1 +1 +1 +1 -1 -1];

p6 =      [+1 +1 +1 +1 +1 +1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 -1 -1 -1 -1;
           +1 +1 -1 -1 -1 -1 -1 -1 -1 -1;
           +1 +1 -1 -1 -1 -1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 -1 -1 -1 -1;
           +1 +1 -1 -1 +1 +1 -1 -1 -1 -1;
           +1 +1 -1 -1 +1 +1 -1 -1 -1 -1;
           +1 +1 -1 -1 +1 +1 -1 -1 -1 -1;
           +1 +1 -1 -1 +1 +1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 -1 -1 -1 -1;
           +1 +1 +1 +1 +1 +1 -1 -1 -1 -1];

P = [p0(:), p1(:), p2(:), p3(:), p4(:), p6(:), p9(:)];
%3.1/3.2
%Реализация работы первого слоя
%Число эталонных образов
Q = 7;

eps = 1 / (Q - 1);

%Размерность входного вектора
R = 10*12;

IW = [p0(:)'; p1(:)'; p2(:)'; p3(:)'; p4(:)'; p6(:)'; p9(:)'];
b = ones(Q, 1) * R;

a = zeros(Q, Q);
for i = 1:Q
    a(:,i) = IW * P(:, i) + b;
end

%3.3
%Реализация работы второго слоя

net = newhop(a);
net.biasConnect(1) = 0;
net.layers{1}.transferFcn = 'poslin';

net.LW{1, 1} = eye(Q, Q) * (1 + eps) - ones(Q, Q) * eps;
view(net);

%3.4 Подача образа на вход, расчет выхода
iterations = 600;
%in = p1(:);
in = p2(:);
A = IW * in + b;
R = sim(net, {1 iterations}, {}, A);
A = R{iterations};
%Индекс наибольшей ненулевой компоненты есть эталонный 
%образ который находится пож этим индексом в строке IW 
index = find(A == max(A));
A = IW(index, :)';

R = reshape(A, 12, 10);
R(R >= 0) = 2;
R(R < 0) = 1;
map = [1, 1, 1; 0, 0, 0];
image(R);
colormap(map)
axis off
axis image
%3.5 Подача зашумленного образа(20%) на вход, расчет выхода
iterations = 600;
r = rand([12, 10]);
M = 0.2;
%in = p3;
in = p0;

%Зашумление
for i = 1:12
    for j = 1:10
        if r(i, j) < M
            in(i, j) = -in(i, j);
        end
    end
end

%Отображение зашумленного образа
in = in(:);
 
R = reshape(in, 12, 10);
R(R >=0) = 2;
R(R < 0) = 1;
map = [1, 1, 1; 0, 0, 0];
figure('Name', '3');
image(R);
colormap(map)
axis off
axis image
 
%Распознавание зашумленного образа
A = IW * in + b;
R = sim(net, {1 iterations}, {}, A);
A = R{iterations};
index = find(A == max(A));
A = IW(index, :)';
 
R = reshape(A, 12, 10);
R(R >=0) = 2;
R(R < 0) = 1;
map = [1, 1, 1; 0, 0, 0];
figure
image(R);
colormap(map)
axis off
axis image

%3.6 Подача зашумленного образа(30%) на вход, расчет выхода
iterations = 600;
r = rand([12, 10]);
M = 0.3;
%in = p2;
in = p9;

%Зашумление
for i = 1:12
    for j = 1:10
        if r(i, j) < M
            in(i, j) = -in(i, j);
        end
    end
end

%Отображение зашумленного образа
in = in(:);
 
R = reshape(in, 12, 10);
R(R >=0) = 2;
R(R < 0) = 1;
map = [1, 1, 1; 0, 0, 0];
figure('Name', '2');
image(R);
colormap(map)
axis off
axis image
 
%Распознавание зашумленного образа
A = IW * in + b;
R = sim(net, {1 iterations}, {}, A);
A = R{iterations};
index = find(A == max(A));
A = IW(index, :)';
 
R = reshape(A, 12, 10);
R(R >=0) = 2;
R(R < 0) = 1;
map = [1, 1, 1; 0, 0, 0];
figure
image(R);
colormap(map)
axis off
axis image